#!/usr/bin/env ruby
#/ Usage: projects [SUBSET]
#/  - List cards for the given subset. SUBSET may be todo, wip, review, or all.
#/    The default is review.
#/ Usage: projects --list
#/  - List projects with their URLs.
#/ Usage: projects --find NAME [--scope OWNER-OR-REPO]
#/  - List projects that match, with their columns.

require_relative "github-api"

COLUMNS = {
  # Mind Meld
  "PC_lQDNTr7OFieqrs4Av6FizgDdaHM" => :wip, # In progress
  "PC_lQDNTr7OFieqrs4Av6FizgDdaHQ" => :review, # Review in progress
  # Personal Projects
  "MDEzOlByb2plY3RDb2x1bW4xMzQwMDU3Mw==" => :todo, # To do
  "MDEzOlByb2plY3RDb2x1bW4xMzQwMDU3NA==" => :wip, # In progress
  # Git Storage Current Iteration
  "MDEzOlByb2plY3RDb2x1bW43NjQxODc0" => :review, # Needs Review
  # varnish
  "PC_lAPNJr_OAMq5CM4A809W" => :todo, # To do
  "PC_lAPNJr_OAMq5CM4A809X" => :wip, # In progress
  "PC_lAPNJr_OAMq5CM4A809Y" => :review, # Review in progress
  "PC_lAPNJr_OAMq5CM4A809Z" => :review, # Reviewer approved

  # (beta)

  # Spokes API
  "PNV_lADNJr_OAAf6DM4ADzl7" => [:wip, :review], # In Progress, In Review
}

MAIL = "âœ‰"

def main(token:, query: nil, scope: nil, mode: :review)
  case mode
  when :find
    find_projects(query, token: token, scope: scope)

  when :projects, :all
    ids = COLUMNS.keys
    results = get_data(token: token, query: QUERY, variables: {"ids" => ids})
    if errors = results["errors"]
      p errors
      exit 1
    end
    show_results collect_columns(results.fetch("data")),
      hide_columns: mode == :projects

  else
    ids = COLUMNS.select { |_, m| Array(m).include?(mode) }.map { |id, _| id }
    if ids.empty?
      puts "error: no columns for SUBSET #{mode}"
      return
    end
    results = get_data(token: token, query: QUERY, variables: {"ids" => ids})
    if errors = results["errors"]
      p errors
      exit 1
    end
    show_results collect_columns(results.fetch("data"))
  end
end

def usage
  system "cat #{$0} | grep ^#/ | cut -c4-"
  exit 1
end

def find_projects(query, scope:, token:)
  results = get_data(token: token, **find_projects_query(scope: scope, query: query))
  if errors = results["errors"]
    errors.each do |err|
      next if err["type"] == "NOT_FOUND"
      puts "warning: #{error.inspect}"
    end
    # continue, there might be other results
  end
  results.fetch("data").values.each do |obj|
    next if obj.nil?
    obj.fetch("projects").fetch("nodes").each do |project|
      puts "#{project.fetch("id")} #{project.fetch("name")}"
      project.fetch("columns").fetch("nodes").each do |column|
        puts " column: #{column.fetch("id")} #{column.fetch("name")}"
      end
    end
    obj.fetch("projectsNext").fetch("nodes").each do |project|
      puts "#{project.fetch("id")} (beta) #{project.fetch("title")}"
      project.fetch("views").fetch("nodes").each do |view|
        puts " view: #{view.fetch("id")} #{view.fetch("name")}"
      end
    end
  end
end

def find_projects_query(scope:, query:)
  case scope
  when /\//
    owner, repository = scope.split("/", 2)
    {query: FIND_REPO_PROJECTS, variables: {owner: owner, repository: repository, query: query}}
  when String
    {query: FIND_OWNED_PROJECTS, variables: {owner: scope, query: query}}
  when nil
    {query: FIND_MY_PROJECTS, variables: {query: query}}
  end
end

PROJECT_LIST = <<-FRAGMENT
fragment projectList on ProjectConnection{
  nodes{
    name id
    columns(first:10){
      nodes{ name id }
    }
  }
}
fragment projectNextList on ProjectNextConnection {
  nodes {
    title id
    views(first:10) {
      nodes{ name id }
    }
  }
}
FRAGMENT

FIND_REPO_PROJECTS = <<-GRAPHQL
query($query:String,$owner:String!,$repository:String!) {
  repository(owner:$owner,name:$repository) {
    projects(search:$query, first:10){
      ...projectList
    }
    projectsNext(query:$query, first:10){
      ...projectNextList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

FIND_OWNED_PROJECTS = <<-GRAPHQL
query($query:String,$owner:String!) {
  user(login:$owner){
    projects(search:$query, first:10){
      ...projectList
    }
    projectsNext(query:$query, first:10){
      ...projectNextList
    }
  }
  organization(login:$owner){
    projects(search:$query, first:10){
      ...projectList
    }
    projectsNext(query:$query, first:10){
      ...projectNextList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

FIND_MY_PROJECTS = <<-GRAPHQL
query($query:String) {
  viewer{
    projects(search:$query, first:10){
      ...projectList
    }
    projectsNext(query:$query, first:10){
      ...projectNextList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

def collect_columns(data)
  data.fetch("nodes").group_by { |column| [column.fetch("__typename"), column.dig("project", "name") || column.dig("project", "title")] }
end

def show_results(projects, hide_columns: false)
  projects.sort_by(&:first).each do |type_and_name, columns|
    type, name = type_and_name
    puts "** #{name} ** #{columns.first.dig("project", "url")}"
    next if hide_columns
    columns.each do |column|
      case type
      when "ProjectColumn"
        show_project_column(column)
      when "ProjectView"
        show_memex_column(column)
      else
        p unrecognized_type: column
      end
    end
  end
end

def show_project_column(column)
  puts "- #{column.fetch("name")}"
  cards = column.fetch("cards")
  total_cards = cards.fetch("totalCount")
  cards = cards.fetch("nodes")
  cards.each do |card|
    case card.fetch("state")
    when "REDACTED"
      puts "  - (redacted)"
    when "CONTENT_ONLY"
      show_card_content(card.fetch("content"))
    when "NOTE_ONLY"
      puts "  - #{card.fetch("note").lines.first}"
      puts "    #{card.fetch("url")}"
    end
  end
  remaining = total_cards - cards.size
  if remaining > 0
    puts "  (and #{remaining} more)"
  end
end

def show_card_content(content)
  author = content.fetch("author").fetch("login")
  assignees = content.fetch("assignees").fetch("nodes").map { |a| a.fetch("login") }
  assignees_str = assignees.empty? ? " (#{author})" : " (assigned to #{assignees.join(",")})"
  changes_str =
    case content["reviewDecision"]
    when "CHANGES_REQUESTED"
      " (changes requested)"
    when "APPROVED"
      " (approved)"
    else
      ""
    end
  bullet = content["isReadByViewer"] ? "-" : MAIL
  puts "  #{bullet} #{content.fetch("title")}#{assignees_str}#{changes_str}"
  puts "    #{content.fetch("url")}"
end

def show_memex_column(column)
  puts "* #{column.fetch("name")} #{column.dig("project", "url")}/views/#{column.fetch("number")}"
  items = column.fetch("items")
  total_items = items.fetch("totalCount")
  items = items.fetch("nodes")
  # Go through the items by status, but try to keep the same order of statuses
  # as in the results.
  statuses = items.map { |item| memex_field(item, "Status") }.uniq
  statuses.each do |status|
    puts "- #{memex_field_string(status, column, "Status")}"
    items.reverse.each do |item|
      next unless status == memex_field(item, "Status")
      case item.fetch("type")
      when "REDACTED"
        puts "  - (redacted)"
      when "DRAFT_ISSUE"
        puts "  - #{memex_field(item, "Title")}"
      when "ISSUE", "PULL_REQUEST"
        show_card_content(item.fetch("content"))
      else
        puts "  - (unrecognized) #{type}: #{item.inspect}"
      end
    end
  end

  remaining = total_items - items.size
  if remaining > 0
    puts "  (and #{remaining} more)"
  end
end

def memex_field_string(val, column, field_name)
  fields = column.dig("project", "fields", "nodes") || []
  field = fields.find { |f| f["name"] == field_name }
  return val unless field
  settings = JSON.parse(field.fetch("settings"))
  options = settings.fetch("options")
  options.each do |setting|
    if setting.fetch("id") == val
      return setting.fetch("name")
    end
  end
  val
end

def memex_field(item, field_name)
  item.fetch("fieldValues").fetch("nodes").each do |field|
    next unless field_name == field.fetch("projectField").fetch("name")
    return field.fetch("value")
  end
  nil
end

QUERY = <<END_QUERY
query($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    ... columnDetails
    ... viewDetails
  }
}
fragment columnDetails on ProjectColumn {
  id name
  project { id name url }
  cards(first: 10, archivedStates: [NOT_ARCHIVED]) {
    totalCount
    nodes {
      id note
      state # CONTENT_ONLY or NOTE_ONLY or REDACTED
      url   # url of project card
      content { ...issueDetails ...pullDetails }
    }
  }
}
fragment viewDetails on ProjectView {
  id name number
  project {
    id title url
    fields(first:20) {
      nodes { name settings }
    }
  }
  items(first: 20) {
    totalCount
    nodes {
      id type
      fieldValues(first: 10) {
        nodes { value projectField { name } }
      }
      content { ...issueDetails ...pullDetails }
    }
  }
}
fragment issueDetails on Issue {
  author { login }
  issue_id: id
  url title
  isReadByViewer
  assignees(first: 10) {
    nodes { login }
  }
}
fragment pullDetails on PullRequest {
  author { login }
  pull_id: id
  url title
  isReadByViewer reviewDecision
  assignees(first: 10) {
    nodes { login }
  }
}
END_QUERY

def build_request(column_ids)
  variables = {"ids" => column_ids}
  columns = projects.values.flatten
  projects = projects.keys
  variables = {}
  projects.each_with_index do |proj, i|
    variables["project_#{i}"] = proj
  end
  columns.each_with_index do |col, i|
    variables["column_#{i}"] = col
  end
  variable_decls = variables.keys.map { |name| "$#{name}: ID!" }.join(", ")
  query = "query (#{variable_decls}) {\n"
  variables.keys.each do |name|
    # todo: replace this with 'nodes(ids: [])'
    query << "  #{name}: node(id: $#{name}) { ...projectDetails ...columnDetails }\n"
  end
  query << "}\n" + FRAGMENT
  return query, variables
end

opts = {}

while ARGV.first.to_s =~ /^-/
  case ARGV.shift
  when "--find"
    opts[:mode] = :find
    opts[:query] = ARGV.shift
  when "--scope"
    opts[:scope] = ARGV.shift
  when "--list"
    opts[:mode] = :projects
  else
    usage
  end
end

case ARGV.first
when "todo"
  opts[:mode] = :todo
  ARGV.shift
when "wip"
  opts[:mode] = :wip
  ARGV.shift
when "review"
  opts[:mode] = :review
  ARGV.shift
when "all"
  opts[:mode] = :all
  ARGV.shift
end

usage if ARGV.size > 0

unless opts[:token] = ENV["GITHUB_TOKEN"]
  token_file = File.read(File.join(ENV["HOME"], ".github-token"))
  if token_file =~ /(^| )GITHUB_TOKEN=(\w+)/
    opts[:token] = $2
  end
end

main(opts)
