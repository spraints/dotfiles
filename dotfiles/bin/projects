#!/usr/bin/env ruby
#/ Usage: projects [--find NAME [--scope OWNER-OR-REPO]] [--all]
#/ List my projects and in-progress or in-review cards.
#/ If --find is provided, show matching projects and columns, along with their IDs.

require "json"
require "net/http"
require "timeout"
require "yaml"

COLUMNS = {
  # Spokes API
  "MDEzOlByb2plY3RDb2x1bW4xMjQ0OTM3OQ==" => false, # To Do This Iteration
  "MDEzOlByb2plY3RDb2x1bW4xMjQ0OTM4MA==" => false, # In progress
  "MDEzOlByb2plY3RDb2x1bW4xMjQ0OTQwMg==" => true, # In review
  # Mind Meld
  "PC_lQDNTr7OFieqrs4Av6FizgDdaHM" => false, # In progress
  "PC_lQDNTr7OFieqrs4Av6FizgDdaHQ" => true, # Review in progress
  # Personal Projects
  "MDEzOlByb2plY3RDb2x1bW4xMzQwMDU3Mw==" => false, # To do
  "MDEzOlByb2plY3RDb2x1bW4xMzQwMDU3NA==" => false, # In progress
  # Git Storage Current Iteration
  "MDEzOlByb2plY3RDb2x1bW43NjQxODc0" => true, # Needs Review
}

MAIL = "âœ‰"

def main(token:, find: nil, scope: nil, all: false)
  return find_projects(find, token: token, scope: scope) if find
  ids = all ? COLUMNS.keys : COLUMNS.select { |_, ok| ok }.map { |id, _| id }
  results = get_data(token: token, query: QUERY, variables: {"ids" => ids})
  #results = JSON.parse(File.read("example.json"))
  if errors = results["errors"]
    p errors
    exit 1
  end
  show_results(collect_columns(results.fetch("data")))
end

def usage
  system "cat #{$0} | grep ^#/ | cut -c4-"
  exit 1
end

def find_projects(query, scope:, token:)
  results = get_data(token: token, **find_projects_query(scope: scope, query: query))
  if errors = results["errors"]
    puts "warning: #{errors.inspect}"
    # continue, there might be other results
  end
  results.fetch("data").values.each do |obj|
    next if obj.nil?
    obj.fetch("projects").fetch("nodes").each do |project|
      puts "#{project.fetch("id")} #{project.fetch("name")}"
      project.fetch("columns").fetch("nodes").each do |column|
        puts " - #{column.fetch("id")} #{column.fetch("name")}"
      end
    end
  end
end

def find_projects_query(scope:, query:)
  case scope
  when /\//
    owner, repository = scope.split("/", 2)
    {query: FIND_REPO_PROJECTS, variables: {owner: owner, repository: repository, query: query}}
  when String
    {query: FIND_OWNED_PROJECTS, variables: {owner: scope, query: query}}
  when nil
    {query: FIND_MY_PROJECTS, variables: {query: query}}
  end
end

PROJECT_LIST = <<-FRAGMENT
fragment projectList on ProjectConnection{
  nodes{
    name id
    columns(first:10){
      nodes{ name id }
    }
  }
}
FRAGMENT

FIND_REPO_PROJECTS = <<-GRAPHQL
query($query:String,$owner:String!,$repository:String!) {
  repository(owner:$owner,name:$repository) {
    projects(search:$query, first:10){
      ...projectList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

FIND_OWNED_PROJECTS = <<-GRAPHQL
query($query:String,$owner:String!) {
  user(login:$owner){
    projects(search:$query, first:10){
      ...projectList
    }
  }
  organization(login:$owner){
    projects(search:$query, first:10){
      ...projectList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

FIND_MY_PROJECTS = <<-GRAPHQL
query($query:String) {
  viewer{
    projects(search:$query, first:10){
      ...projectList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

def collect_columns(data)
  data.fetch("nodes").group_by { |column| column.dig("project", "name") }
end

def show_results(projects)
  projects.sort_by(&:first).each do |name, columns|
    puts "** #{name} **"
    columns.each do |column|
      puts "- #{column.fetch("name")}"
      cards = column.fetch("cards")
      total_cards = cards.fetch("totalCount")
      cards = cards.fetch("nodes")
      cards.each do |card|
        case card.fetch("state")
        when "REDACTED"
          puts "  - (redacted)"
        when "CONTENT_ONLY"
          content = card.fetch("content")
          assignees = content.fetch("assignees").fetch("nodes").map { |a| a.fetch("login") }
          assignees_str = assignees.empty? ? "" : " (#{assignees.join(",")})"
          changes_str =
            case content["reviewDecision"]
            when "CHANGES_REQUESTED"
              " (changes requested)"
            when "APPROVED"
              " (approved)"
            else
              ""
            end
          bullet = content["isReadByViewer"] ? "-" : MAIL
          puts "  #{bullet} #{content.fetch("title")}#{assignees_str}#{changes_str}"
          puts "    #{content.fetch("url")}"
        when "NOTE_ONLY"
          puts "  - #{card.fetch("note").lines.first}"
          puts "    #{card.fetch("url")}"
        end
      end
      remaining = total_cards - cards.size
      if remaining > 0
        puts "  (and #{remaining} more)"
      end
    end
  end
end

QUERY = <<END_QUERY
query($ids: [ID!]!) {
  nodes(ids: $ids) { ... columnDetails }
}
fragment columnDetails on ProjectColumn {
  id name
  project { id name }
  cards(first: 10) {
    totalCount
    nodes {
      id note
      state # CONTENT_ONLY or NOTE_ONLY or REDACTED
      url   # url of project card
      content { ...issueDetails ...pullDetails }
    }
  }
}
fragment issueDetails on Issue {
  issue_id: id
  url title
  isReadByViewer
  assignees(first: 10) {
    nodes { login }
  }
}
fragment pullDetails on PullRequest {
  pull_id: id
  url title
  isReadByViewer reviewDecision
  assignees(first: 10) {
    nodes { login }
  }
}
END_QUERY

def build_request(column_ids)
  variables = {"ids" => column_ids}
  columns = projects.values.flatten
  projects = projects.keys
  variables = {}
  projects.each_with_index do |proj, i|
    variables["project_#{i}"] = proj
  end
  columns.each_with_index do |col, i|
    variables["column_#{i}"] = col
  end
  variable_decls = variables.keys.map { |name| "$#{name}: ID!" }.join(", ")
  query = "query (#{variable_decls}) {\n"
  variables.keys.each do |name|
    # todo: replace this with 'nodes(ids: [])'
    query << "  #{name}: node(id: $#{name}) { ...projectDetails ...columnDetails }\n"
  end
  query << "}\n" + FRAGMENT
  return query, variables
end

def get_data(token:, query:, variables: {})
  request = {query: query, variables: variables}

  req = Net::HTTP::Post.new("https://api.github.com/graphql")
  req["Authorization"] = "token #{token}"
  req.body = JSON.dump(request)

  Timeout.timeout(30.0) do
    Net::HTTP.start("api.github.com", 443, use_ssl: true) do |http|
      body = http.request(req).body
      #File.write("example.json", body)
      JSON.parse(body)
    end
  end
end

opts = {}

while ARGV.first.to_s =~ /^-/
  case ARGV.shift
  when "--find"
    opts[:find] = ARGV.shift
  when "--scope"
    opts[:scope] = ARGV.shift
  when "--all"
    opts[:all] = true
  else
    usage
  end
end

usage if ARGV.size > 0

unless opts[:token] = ENV["GITHUB_TOKEN"]
  token_file = File.read(File.join(ENV["HOME"], ".github-token"))
  if token_file =~ /(^| )GITHUB_TOKEN=(\w+)/
    opts[:token] = $2
  end
end

main(opts)
