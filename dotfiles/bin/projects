#!/usr/bin/env ruby
#/ Usage: projects [SUBSET]
#/  - List cards for the given subset. SUBSET may be todo, wip, review, or all.
#/    The default is review.
#/ Usage: projects --list
#/  - List projects with their URLs.
#/ Usage: projects --find NAME [--scope OWNER-OR-REPO]
#/  - List projects that match, with their columns.

require_relative "github-api"

COLUMNS = {
  # Spokes API
  "MDEzOlByb2plY3RDb2x1bW4xMjQ0OTM3OQ==" => :todo, # To Do
  "MDEzOlByb2plY3RDb2x1bW4xMjQ0OTM4MA==" => :wip, # In progress
  "MDEzOlByb2plY3RDb2x1bW4xMjQ0OTQwMg==" => :review, # In review
  # Mind Meld
  "PC_lQDNTr7OFieqrs4Av6FizgDdaHM" => :wip, # In progress
  "PC_lQDNTr7OFieqrs4Av6FizgDdaHQ" => :review, # Review in progress
  # Personal Projects
  "MDEzOlByb2plY3RDb2x1bW4xMzQwMDU3Mw==" => :todo, # To do
  "MDEzOlByb2plY3RDb2x1bW4xMzQwMDU3NA==" => :wip, # In progress
  # Git Storage Current Iteration
  "MDEzOlByb2plY3RDb2x1bW43NjQxODc0" => :review, # Needs Review
  "MDEzOlByb2plY3RDb2x1bW43NjQxODc1" => :review, # Reviewer approved
  # Git Protocols On Deck
  "PC_lAPNJr_OAECYbs4BDLfX" => :review, # In Review
  # varnish
  "PC_lAPNJr_OAMq5CM4A809W" => :todo, # To do
  "PC_lAPNJr_OAMq5CM4A809X" => :wip, # In progress
  "PC_lAPNJr_OAMq5CM4A809Y" => :review, # Review in progress
  "PC_lAPNJr_OAMq5CM4A809Z" => :review, # Reviewer approved
}

MAIL = "âœ‰"

def main(token:, query: nil, scope: nil, mode: :review)
  case mode
  when :find
    find_projects(query, token: token, scope: scope)

  when :projects, :all
    ids = COLUMNS.keys
    results = get_data(token: token, query: QUERY, variables: {"ids" => ids})
    if errors = results["errors"]
      p errors
      exit 1
    end
    show_results collect_columns(results.fetch("data")),
      hide_columns: mode == :projects

  else
    ids = COLUMNS.select { |_, m| mode == m }.map { |id, _| id }
    if ids.empty?
      puts "error: no columns for SUBSET #{mode}"
      return
    end
    results = get_data(token: token, query: QUERY, variables: {"ids" => ids})
    if errors = results["errors"]
      p errors
      exit 1
    end
    show_results collect_columns(results.fetch("data"))
  end
end

def usage
  system "cat #{$0} | grep ^#/ | cut -c4-"
  exit 1
end

def find_projects(query, scope:, token:)
  results = get_data(token: token, **find_projects_query(scope: scope, query: query))
  if errors = results["errors"]
    puts "warning: #{errors.inspect}"
    # continue, there might be other results
  end
  results.fetch("data").values.each do |obj|
    next if obj.nil?
    obj.fetch("projects").fetch("nodes").each do |project|
      puts "#{project.fetch("id")} #{project.fetch("name")}"
      project.fetch("columns").fetch("nodes").each do |column|
        puts " - #{column.fetch("id")} #{column.fetch("name")}"
      end
    end
  end
end

def find_projects_query(scope:, query:)
  case scope
  when /\//
    owner, repository = scope.split("/", 2)
    {query: FIND_REPO_PROJECTS, variables: {owner: owner, repository: repository, query: query}}
  when String
    {query: FIND_OWNED_PROJECTS, variables: {owner: scope, query: query}}
  when nil
    {query: FIND_MY_PROJECTS, variables: {query: query}}
  end
end

PROJECT_LIST = <<-FRAGMENT
fragment projectList on ProjectConnection{
  nodes{
    name id
    columns(first:10){
      nodes{ name id }
    }
  }
}
FRAGMENT

FIND_REPO_PROJECTS = <<-GRAPHQL
query($query:String,$owner:String!,$repository:String!) {
  repository(owner:$owner,name:$repository) {
    projects(search:$query, first:10){
      ...projectList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

FIND_OWNED_PROJECTS = <<-GRAPHQL
query($query:String,$owner:String!) {
  user(login:$owner){
    projects(search:$query, first:10){
      ...projectList
    }
  }
  organization(login:$owner){
    projects(search:$query, first:10){
      ...projectList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

FIND_MY_PROJECTS = <<-GRAPHQL
query($query:String) {
  viewer{
    projects(search:$query, first:10){
      ...projectList
    }
  }
}
#{PROJECT_LIST}
GRAPHQL

def collect_columns(data)
  data.fetch("nodes").group_by { |column| column.dig("project", "name") }
end

def show_results(projects, hide_columns: false)
  projects.sort_by(&:first).each do |name, columns|
    puts "** #{name} ** #{columns.first.dig("project", "url")}"
    next if hide_columns
    columns.each do |column|
      puts "- #{column.fetch("name")}"
      cards = column.fetch("cards")
      total_cards = cards.fetch("totalCount")
      cards = cards.fetch("nodes")
      cards.each do |card|
        case card.fetch("state")
        when "REDACTED"
          puts "  - (redacted)"
        when "CONTENT_ONLY"
          content = card.fetch("content")
          author = content.fetch("author").fetch("login")
          assignees = content.fetch("assignees").fetch("nodes").map { |a| a.fetch("login") }
          assignees_str = assignees.empty? ? " (#{author})" : " (assigned to #{assignees.join(",")})"
          changes_str =
            case content["reviewDecision"]
            when "CHANGES_REQUESTED"
              " (changes requested)"
            when "APPROVED"
              " (approved)"
            else
              ""
            end
          bullet = content["isReadByViewer"] ? "-" : MAIL
          puts "  #{bullet} #{content.fetch("title")}#{assignees_str}#{changes_str}"
          puts "    #{content.fetch("url")}"
        when "NOTE_ONLY"
          puts "  - #{card.fetch("note").lines.first}"
          puts "    #{card.fetch("url")}"
        end
      end
      remaining = total_cards - cards.size
      if remaining > 0
        puts "  (and #{remaining} more)"
      end
    end
  end
end

QUERY = <<END_QUERY
query($ids: [ID!]!) {
  nodes(ids: $ids) { ... columnDetails }
}
fragment columnDetails on ProjectColumn {
  id name
  project { id name url }
  cards(first: 10, archivedStates: [NOT_ARCHIVED]) {
    totalCount
    nodes {
      id note
      state # CONTENT_ONLY or NOTE_ONLY or REDACTED
      url   # url of project card
      content { ...issueDetails ...pullDetails }
    }
  }
}
fragment issueDetails on Issue {
  author { login }
  issue_id: id
  url title
  isReadByViewer
  assignees(first: 10) {
    nodes { login }
  }
}
fragment pullDetails on PullRequest {
  author { login }
  pull_id: id
  url title
  isReadByViewer reviewDecision
  assignees(first: 10) {
    nodes { login }
  }
}
END_QUERY

def build_request(column_ids)
  variables = {"ids" => column_ids}
  columns = projects.values.flatten
  projects = projects.keys
  variables = {}
  projects.each_with_index do |proj, i|
    variables["project_#{i}"] = proj
  end
  columns.each_with_index do |col, i|
    variables["column_#{i}"] = col
  end
  variable_decls = variables.keys.map { |name| "$#{name}: ID!" }.join(", ")
  query = "query (#{variable_decls}) {\n"
  variables.keys.each do |name|
    # todo: replace this with 'nodes(ids: [])'
    query << "  #{name}: node(id: $#{name}) { ...projectDetails ...columnDetails }\n"
  end
  query << "}\n" + FRAGMENT
  return query, variables
end

opts = {}

while ARGV.first.to_s =~ /^-/
  case ARGV.shift
  when "--find"
    opts[:mode] = :find
    opts[:query] = ARGV.shift
  when "--scope"
    opts[:scope] = ARGV.shift
  when "--list"
    opts[:mode] = :projects
  else
    usage
  end
end

case ARGV.first
when "todo"
  opts[:mode] = :todo
  ARGV.shift
when "wip"
  opts[:mode] = :wip
  ARGV.shift
when "review"
  opts[:mode] = :review
  ARGV.shift
when "all"
  opts[:mode] = :all
  ARGV.shift
end

usage if ARGV.size > 0

unless opts[:token] = ENV["GITHUB_TOKEN"]
  token_file = File.read(File.join(ENV["HOME"], ".github-token"))
  if token_file =~ /(^| )GITHUB_TOKEN=(\w+)/
    opts[:token] = $2
  end
end

main(opts)
