#!/usr/bin/env ruby

require "socket"

DEBUG = false

# List all interfaces.
ifaddrs = Socket.getifaddrs

# Figure out which interfaces look like normal network connections.
nets = []
ifaddrs.each do |ifaddr|
  next if ifaddr.flags & Socket::IFF_LOOPBACK > 0
  next unless ifaddr.addr.ipv4?
  nets << [ifaddr.addr, ifaddr.netmask]
end

# Figure out which other IP addresses are on each network.
all_dests = []
nets.each do |addr, netmask|
  puts "from #{addr.ip_unpack[0]} ..."
  a, n = [addr, netmask].map { |ax| ax.ip_unpack[0].split(".").map { |b| b.to_i }.inject(0) { |res, b| res<<8 | b } }
  network = a & n
  (1 .. ((n ^ 0xffffffff) - 1)).each do |off|
    if DEBUG
      printf "addr %15s %08x / netmask %15s %08x / off %02x => %08x",
        addr.ip_unpack[0],
        a,
        netmask.ip_unpack[0],
        n,
        off,
        (network | off)
    end
    dest_hex = network | off
    dest = [3, 2, 1, 0].map { |off| ((dest_hex & (0xff << (off * 8))) >> (off * 8)).to_s }.join(".")
    all_dests << dest
  end
end

r, w = IO.pipe
all_dests.each do |dest|
  spawn("ping", "-c", "1", "-t", "2", dest, out: w)
end
w.close

begin
  while line = r.readline
    if line =~ /bytes from/
      puts line
    end
    Process.wait(-1, Process::WNOHANG)
  end
rescue EOFError
  # ok
end
