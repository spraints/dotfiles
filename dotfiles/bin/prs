#!/usr/bin/env ruby
#/ Usage: prs [--count N] [--last [N] day|week|month|year]
#/ Show my PRs.

require "json"
require "net/http"
require "time"
require "timeout"

def main(token:, count: 20, earliest: (Time.now - (90 * DAY)), ignore_trains: false)
  earliest = earliest.to_datetime
  results = get_data(token: token, count: count)
  if errors = results["errors"]
    p errors
    exit 1
  end
  prs = results.dig("data", "viewer", "pullRequests", "nodes")
  prs.each do |pr|
    updated_at = DateTime.parse(pr.fetch("updatedAt"))
    archived = pr.fetch("repository").fetch("isArchived")
    next if updated_at < earliest || archived
    author = pr.fetch("author").fetch("login")
    repository = pr.fetch("repository").fetch("nameWithOwner")
    title = pr.fetch("title")
    permalink = pr.fetch("permalink")
    draft = pr.fetch("isDraft")
    is_read = pr.fetch("isReadByViewer")
    decision = pr.fetch("reviewDecision")
    ago = time_in_words(updated_at)
    check_status = pr.dig("headRef", "target", "statusCheckRollup", "state")
    branch = pr.fetch("headRefName")
    mergeable = pr.fetch("mergeable")
    automerge_enabled = !pr.dig("autoMergeRequest", "enabledAt").nil?

    color, dot, status =
      if draft
        [30, "▪", "DRAFT"]
      elsif check_status != "SUCCESS" && check_status != "PENDING" && !check_status.nil?
        [31, "✖︎", "CI_#{check_status}"]
      elsif mergeable != "MERGEABLE" && mergeable != "UNKNOWN"
        [31, "✖︎", mergeable]
      elsif decision == "CHANGES_REQUESTED"
        [31, "✖︎", decision]
      elsif check_status == "PENDING"
        [33, "●", "CI_#{check_status}"]
      elsif decision != "APPROVED" && !decision.nil?
        [33, "●", decision]
      elsif mergeable == "UNKNOWN"
        [32, "✔︎", "checking_merge"]
      else
        [32, "✔︎", decision || "no_review"]
      end

    dot = "🤖" if automerge_enabled

    read_dot =
      if is_read
        " "
      else
        mail = "✉"
        "\033[30m#{mail}\033[0m"
      end

    printf("%<read_dot>s \033[%<color>dm%<dot>s %<status>-15s\033[0m %<permalink>s [%<branch>s by %<author>s] %<title>s, updated %<ago>s\n", {
      read_dot: read_dot,
      color: color,
      dot: dot,
      status: status,
      permalink: permalink,
      branch: branch,
      author: author,
      title: title,
      ago: ago,
    })
    show_train_info(pr) unless ignore_trains
  end
end

def show_train_info(pr)
  if timeline_items = pr.dig("timelineItems", "nodes")
    timeline_items.each do |item|
      source = item.fetch("source")
      next if source.nil? || source.empty?
      state = source.fetch("state")
      branch = source.fetch("headRefName")
      url = source.fetch("url")
      source_labels = source.dig("labels", "nodes")&.map { |label| label.fetch("name") }
      train_label = source_labels.grep(/Deploy train/).first

      if state == "OPEN" && train_label
        puts "  - [#{branch}] #{url} #{source_labels.map { |label| "(#{label})" }.join(" ")}"
      end
    end
  end
end

DAY = 60 * 60 * 24

def time_in_words(dt)
  ago = (Time.now - dt.to_time).to_i
  days = ago / DAY
  months = days / 30
  if days < 1
    "in the last day"
  elsif days < 7
    "in the last #{days + 1} days"
  elsif months < 1
    "in the last month"
  else
    "in the last #{months + 1} months"
  end
end

def usage
  system "cat #{$0} | grep ^#/ | cut -c4-"
  exit 1
end

QUERY = <<QUERY
query ($count: Int) {
  viewer {
    pullRequests(states: [OPEN], first: $count, orderBy: {field: CREATED_AT, direction: DESC}) {
      nodes {
        repository { nameWithOwner isArchived }
        author { login }
        headRef {
          target {
            ... on Commit {
              statusCheckRollup { state }
            }
          }
        }
        timelineItems(last: 10, itemTypes: [CROSS_REFERENCED_EVENT]) {
          nodes {
            ... on CrossReferencedEvent {
              source {
                ... on PullRequest {
                  labels(first: 10) { nodes { name } }
                  headRefName state url
                }
              }
            }
          }
        }
        title permalink createdAt updatedAt
        headRefName mergeable
        isDraft isReadByViewer reviewDecision
        autoMergeRequest { enabledAt }
      }
    }
  }
}
QUERY

def get_data(token:, count:)
  request = {
    query: QUERY,
    variables: {
      count: count,
    },
  }
  req = Net::HTTP::Post.new("https://api.github.com/graphql")
  req["Authorization"] = "token #{token}"
  req.body = JSON.dump(request)

  Timeout.timeout(30.0) do
    Net::HTTP.start("api.github.com", 443, use_ssl: true) do |http|
      JSON.parse(http.request(req).body)
    end
  end
end

opts = {}

WEEK = 7 * DAY
MONTH = 32 * DAY
YEAR = 366 * DAY
INT_RE = /\A\d+\z/

def parse_since_args
  case ARGV.first
  when INT_RE
    n = ARGV.shift.to_i
    n * parse_time_unit_arg
  else
    parse_time_unit_arg
  end
end

def parse_time_unit_arg
  case arg = ARGV.shift
  when /\Aday/
    DAY
  when /\Aweek/
    WEEK
  when /\Amonth/
    MONTH
  when /\Ayear/
    YEAR
  else
    $stderr.puts "Unrecognized time value #{arg.inspect}"
    exit 1
  end
end

while ARGV.first.to_s =~ /^-/
  case ARGV.shift
  when "--count"
    opts[:count] = ARGV.shift.to_i
  when "--last"
    opts[:earliest] = Time.now - parse_since_args
  else
    usage
  end
end

usage if ARGV.size > 1

unless opts[:token] = ENV["GITHUB_TOKEN"]
  token_file = File.read(File.join(ENV["HOME"], ".github-token"))
  if token_file =~ /(^| )GITHUB_TOKEN=(\w+)/
    opts[:token] = $2
  end
end

main(opts)
