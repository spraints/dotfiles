#!/bin/bash

set -e
set -o nounset

root="$(cd "$(dirname "$0")"; pwd -P)"
cd "${root}"

main() {
  set_up_data_partition
  set_up_docker_dir

  install_packages apt-transport-https

  for f in *.key; do sudo apt-key add $f; done
  sudo cp -v *.list /etc/apt/sources.list.d

  install_packages $DEBS $GH_DEBS

  install_go
  install_docker_compose
  install_mkcert
  install_ngrok

  sudo usermod -a -G docker $USER

  clone_docker_services

  sudo timedatectl set-timezone America/Indiana/Indianapolis
}

install_packages() {
  local pkg=
  local noop=true
  for p; do
    if ! dpkg -l "$p" >&/dev/null; then
      pkg="$pkg $p"
      noop=false
    fi
  done
  if ! $noop; then
    sudo apt-get update
    sudo apt-get install -y $pkg
  fi
}

clone_docker_services() {
  if [ ! -d ~/github/mhagger-docker-test-env/.git ]; then
    grep -q ghe.io ~/.ssh/known_hosts || echo 'ghe.io,54.83.16.211 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHv7ZAHYhwNmhQTjcQpbeF21MB+5UE9Zqa1aBcmLL5bOFNuxoKFR94PngnZzCBiN1qyHmu2vc9n5Zhx2MnGyjfQ=' >> ~/.ssh/known_hosts

    git clone git@ghe.io:spraints/docker-services.git ~/github/mhagger-docker-test-env
  fi
}

set_up_data_partition() {
  local DIR=/data
  local DISK=/dev/sda
  local PART=${DISK}2

  if [ -d $DIR ]; then
    echo "$DIR already exists, cowardly refusing to set it up again."
    return
  fi
  if lsblk $PART 2>/dev/null; then
    echo "$PART already exists, cowardly refusing to set it up again."
    return
  fi
  printf '%s\n' \
    'n' \
    'p' \
    '2' \
    '' \
    '' \
    'w' \
    | sudo fdisk $DISK || true # it always exits non-0
  sudo partprobe
  sudo mkfs.ext4 $PART
  local UUID="$(lsblk -n -o UUID $PART)"
  while [ -z "$UUID" ]; do
    sleep 1
    UUID="$(lsblk -n -o UUID $PART)"
  done
  sudo bash -c "echo 'UUID=$UUID    $DIR    ext4  defaults  0  2' >> /etc/fstab"
  sudo mkdir -p $DIR
  sudo mount $DIR
}

set_up_docker_dir() {
  if [ -e /var/lib/docker ]; then
    echo "/var/lib/docker exists, cowardly refusing to set it up again."
    return
  fi
  sudo mkdir -p /data/docker
  sudo chmod 711 /data/docker
  sudo ln -s /data/docker /var/lib/docker
}

install_ngrok() {
  ngrok version 2>/dev/null && return

  echo Installing ngrok
  curl -L -o /tmp/ngrok.zip https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
  (cd /usr/local/bin && sudo unzip /tmp/ngrok.zip)
  rm /tmp/ngrok.zip
}

install_mkcert() {
  /usr/local/bin/mkcert -version && return

  curl -L -o /tmp/mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.1/mkcert-v1.4.1-linux-amd64
  chmod +x /tmp/mkcert
  /tmp/mkcert -version
  sudo cp /tmp/mkcert /usr/local/bin/mkcert
  rm /tmp/mkcert
}

install_docker_compose() {
  docker-compose version 2>/dev/null && return

  echo Installing docker-compose
  DC_URL="https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)"
  sudo curl -L -o /usr/local/bin/docker-compose "$DC_URL"
  sudo chmod +x /usr/local/bin/docker-compose
  docker-compose version
}

install_go() {
  GO_VERSION=1.14.3
  GO_URL="https://dl.google.com/go/go1.14.3.linux-amd64.tar.gz"
  GO_SHA="1c39eac4ae95781b066c144c58e45d6859652247f7515f0d2cba7be7d57d2226"

  if [ -f "/usr/local/go/bin/go" ]; then
    echo Go is already installed.
    /usr/local/go/bin/go version
    return 0
  fi

  echo Installing go
  cd /tmp
  curl -L -o go.tar.gz "$GO_URL"
  if echo "${GO_SHA}  go.tar.gz" | sha256sum -c; then
    sudo tar xfz go.tar.gz -C /usr/local
  fi
  rm -f go.tar.gz
}

DEBS="
  clang-format-7
  curl
  docker-ce
  git
  jq
  libnss3-tools
  lsof
  man
  ruby
  silversearcher-ag
  strace
  tcpdump
  tmux
  unzip
  zip
"

GH_DEBS="
  build-essential
  zlib1g-dev
  libyaml-dev
  libssl-dev
  libgdbm-dev
  libreadline-dev
  libncurses5-dev
  libffi-dev
  bison

  cmake
  pkg-config
  erlang-base
  google-perftools
  libgeoip-dev 
  libgoogle-perftools-dev 
  libhiredis-dev 
  libicu-dev 
  libjansson-dev 
  libjemalloc-dev 
  libmemcached-dev 
  libmysqlclient-dev 
  libreadline-dev 
  libtag1-dev 
  libxml2-dev 
  libxslt1-dev 
  libsasl2-dev 
  libsodium-dev 
  libsqlite3-dev 
  mysql-client
  nodejs

  autoconf
  time
  libcurl4-openssl-dev
  libexpat1-dev
  gettext

  nginx
"

main
