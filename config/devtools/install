#!/bin/bash

set -e
set -o nounset

root="$(cd "$(dirname "$0")"; pwd -P)"
cd "${root}"

main() {
  install_packages $DEBS $GH_DEBS $COND_DEBS

  install_go
  install_docker_compose
  install_mkcert
  install_ngrok
  install_overmind
  if [ -z "${SKIP_GIT:-}" ]; then
    install_git
  fi

  sudo usermod -a -G docker $USER

  clone_docker_services

  sudo timedatectl set-timezone America/Indiana/Indianapolis
}

install_packages() {
  local pkg=
  local noop=true
  for p; do
    if ! dpkg -l "$p" 2>/dev/null | grep -q ^ii; then
      pkg="$pkg $p"
      noop=false
    fi
  done
  if ! $noop; then
    sudo apt-get update
    sudo apt-get install -y $pkg
  fi
}

clone_docker_services() {
  if [ ! -d ~/github/mhagger-docker-test-env/.git ]; then
    grep -q ghe.io ~/.ssh/known_hosts || echo 'ghe.io,54.83.16.211 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHv7ZAHYhwNmhQTjcQpbeF21MB+5UE9Zqa1aBcmLL5bOFNuxoKFR94PngnZzCBiN1qyHmu2vc9n5Zhx2MnGyjfQ=' >> ~/.ssh/known_hosts

    git clone git@ghe.io:spraints/docker-services.git ~/github/mhagger-docker-test-env
  fi
}

install_git() {
  bash install-git.sh || true
}

install_overmind() {
  overmind -version 2>/dev/null && return

  curl -L -o /tmp/overmind.gz https://github.com/DarthSim/overmind/releases/download/v2.1.1/overmind-v2.1.1-linux-amd64.gz
  rm -f /tmp/overmind
  gunzip /tmp/overmind.gz
  chmod +x /tmp/overmind
  /tmp/overmind -version
  sudo cp /tmp/overmind /usr/local/bin/overmind
  rm -f /tmp/overmind
}

install_ngrok() {
  ngrok version 2>/dev/null && return

  echo Installing ngrok
  curl -L -o /tmp/ngrok.zip https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
  (cd /usr/local/bin && sudo unzip /tmp/ngrok.zip)
  rm /tmp/ngrok.zip
}

install_mkcert() {
  mkcert -version 2>/dev/null && return

  curl -L -o /tmp/mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.1/mkcert-v1.4.1-linux-amd64
  chmod +x /tmp/mkcert
  /tmp/mkcert -version
  sudo cp /tmp/mkcert /usr/local/bin/mkcert
  rm /tmp/mkcert
}

install_docker_compose() {
  DC_VERSION=1.27.2
  DC_URL="https://github.com/docker/compose/releases/download/${DC_VERSION}/docker-compose-$(uname -s)-$(uname -m)"

  docker-compose version | grep $DC_VERSION 2>/dev/null && return

  echo Installing docker-compose $DC_VERSION
  sudo curl -L -o /usr/local/bin/docker-compose "$DC_URL"
  sudo chmod +x /usr/local/bin/docker-compose
  docker-compose version
}

install_go() {
  GO_VERSION=1.14.3
  GO_URL="https://dl.google.com/go/go1.14.3.linux-amd64.tar.gz"
  GO_SHA="1c39eac4ae95781b066c144c58e45d6859652247f7515f0d2cba7be7d57d2226"

  if [ -f "/usr/local/go/bin/go" ]; then
    echo Go is already installed.
    /usr/local/go/bin/go version
    return 0
  fi

  echo Installing go
  cd /tmp
  curl -L -o go.tar.gz "$GO_URL"
  if echo "${GO_SHA}  go.tar.gz" | sha256sum -c; then
    sudo tar xfz go.tar.gz -C /usr/local
  fi
  rm -f go.tar.gz
}

DEBS="
  clang-format-7
  curl
  docker-ce
  jq
  libnss3-tools
  lsof
  man-db
  ruby
  silversearcher-ag
  strace
  tcpdump
  tmux
  unzip
  zip
"

GH_DEBS="
  build-essential
  zlib1g-dev
  libyaml-dev
  libssl-dev
  libgdbm-dev
  libreadline-dev
  libncurses5-dev
  libffi-dev
  bison

  cmake
  pkg-config
  erlang-base
  google-perftools
  libgeoip-dev 
  libgoogle-perftools-dev 
  libhiredis-dev 
  libicu-dev 
  libjansson-dev 
  libjemalloc-dev 
  libmemcached-dev 
  libmysqlclient-dev 
  libreadline-dev 
  libtag1-dev 
  libxml2-dev 
  libxslt1-dev 
  libsasl2-dev 
  libsodium-dev 
  libsqlite3-dev 
  mysql-client
  nodejs

  autoconf
  time
  libcurl4-openssl-dev
  libexpat1-dev
  gettext
"

COND_DEBS=
if [ ! -x /usr/sbin/nginx ]; then
  COND_DEBS="$COND_DEBS nginx"
fi
if ! which git >&/dev/null; then
  COND_DEGS="$COND_DEBS git"
fi

main
